// VERSION: 1.1.4
/********************************************************/
/********	ARCHER DFE APPROVED LIBRARIES
/********************************************************/
var request = require('request');
var xpath = require('xpath');
var xmldom = require('xmldom');
var xml2js = require('xml2js');

/********************************************************/
/***** DEFAULT PARAMS
/********************************************************/
/* this params will be used unless overriden by parameters passed in*/
var defaultParams = {
    'proxy':'',
	'verifyCerts':'false',
    'url':'',
    'instance':'',
	'username':'',
    'password':'',
    'dataSource':'itsvp',
    'Report_App_Vuln_Overall_Status':'B1741732-140C-41B4-8440-E7D6BB63CC19',
    'Report_App_Vuln_Severity':'8146E47F-46ED-4290-A8B8-EC757D3E9EE9',
	'Report_App_Device_Count':'A4BFB9B3-38CC-4E8B-B207-44EB0389AD4E',
	'Report_App_Device_Scan_Count':'C61F6656-E03F-4D2E-83D1-999BCF8FC53B',
    'Report_Bus_Process_Vuln_Overall_Status':'C78FD786-FF47-4022-878A-E5E094533A6B',
    'Report_Bus_Process_Vuln_Severity':'6884D879-CF56-4608-A803-21852ABDA5AE',
	'Report_Bus_Process_Device_Count':'3836C829-0268-41D6-B6C1-4B1CF131AF3F',
	'Report_Bus_Process_Device_Scan_Count':'B2F5CB7F-4EE3-432A-8DCD-3B9EAC6A2E86',
    'Report_Bus_Unit_Vuln_Overall_Status':'28F42426-E91A-4AD7-8B37-23791FCE4432',
    'Report_Bus_Unit_Vuln_Severity':'C0131A7D-9981-43BE-9512-D661E8C6140B',
	'Report_Bus_Unit_Device_Count':'1E5A1129-3E2D-49E0-B213-50C264DDF4D3',
	'Report_Bus_Unit_Device_Scan_Count':'B03D3F1B-1C6E-47EC-82B9-19969F20BCF8',
	'Report_Product_Vuln_Overall_Status':'A3EA0FFB-CB49-4161-9E45-7971CCF0C4F8',
	'Report_Product_Vuln_Severity':'0189E3C1-07E2-41A7-895A-971AD58182DB',
	'Report_Product_Device_Count':'1269D920-9E0E-45EF-972A-7961DC3DABE7',
	'Report_Product_Device_Scan_Count':'7D09928F-0849-4555-B7FD-6A30C3832DB6',
	'Report_Vendor_Vuln_Overall_Status':'C2C89FD0-5C58-4181-B439-8C13B0328238',
	'Report_Vendor_Vuln_Severity':'6C744413-4465-4299-8A18-416163AC5A15',
	'Report_Vendor_Device_Count':'85476999-D630-4BF0-B184-E4EE9FAC8E9F',
	'Report_Vendor_Device_Scan_Count':'8FFC4F9F-AEDE-4FA3-826D-306A1C1DC65C',
	'Report_All_Dimensions_Vuln_Overall_Status':'A96FABE5-5F00-4573-9DC3-13B6A2EAFACC',
	'Report_All_Dimensions_Vuln_Severity':'53925319-4622-4E37-9A21-77A2979DDD49',
	'Report_All_Dimensions_Device_Count':'B7BBB4FE-2C30-4512-B45A-1C0DA924FF6B',
	'Report_All_Dimensions_Device_Scan_Count':'4F583CFD-88BD-4F29-AB9C-266EF12A5147'
};

/********************************************************/
/********	DEBUGGING/TESTING SETTINGS
/********************************************************/
/* testing mode tokens */
var testingMode_Tokens = {
	'LastRunTime':'2018-04-09T15:25:29Z',
	'PreviousRunContext':''
};

/* testing mode params */
/* these override the default params just like the real archer params would */
var testingMode_Params = {
  'url':'https://www.yourArcherURL.com',
  'instance':'yourInstance',
'username':'userName',
'password':'yourPassword'
};

/********************************************************/
/***** GLOBAL VARS
/********************************************************/
var testingMode = false;
var testingMode_FS = null;
var params = null;
var tokens = null;
var verifyCerts = false;
var useProxy = false;
var errorArray = [];
var previousRunContext = {};

/********************************************************/
/********	INIT
/********************************************************/
function init(){
	/* check if testing mode should be active (no archer DFE present) */
	if(typeof context == 'undefined'){
		testingMode=true;
		testingMode_FS=require('fs');
	}

	/* get params and tokens */
	params = getArcherParams();
	tokens = getArcherTokens();

    /* setup cert verify */
    if(params['verifyCerts'].toLowerCase()=='true'){
        verifyCerts=true;
	}
	else{
		process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    }

    /* setup proxy */
    if(params['proxy']!=null && params['proxy']!=''){
        useProxy=true;
    }
}

/*********************************************************/
/********	UTILS
/********************************************************/
function getArcherDate(unixSeconds){
	/* convert to date */
	var dt = new Date(unixSeconds*1000);

	var hours = dt.getHours();
	var ampm = 'AM';

	/* translate hours */
	if(hours>12){
		ampm='PM';
		hours=hours-12;
	}

	/* build the string */
	return pad(dt.getMonth()+1,2) + '/' + pad(dt.getDate(),2) + '/' + pad(dt.getFullYear(),4) + ' ' + pad(hours,2) + ':' + pad(dt.getMinutes(),2) + ' ' + ampm;
}

Date.prototype.addDays = function(days) {
	var dat = new Date(this.valueOf());
	dat.setDate(dat.getDate() + days);
	return dat;
}

function pad(num, size) {
    var s = num+"";
    while (s.length < size) s = "0" + s;
    return s;
}

/********************************************************/
/********	DATA CONVERSIONS
/********************************************************/
function jsonToString(json){
	return JSON.stringify(json,null,4);
}

function jsonToXMLString(json,rootElement){
	if(rootElement){
		var bldrOpts = {
			headless: true, rootName: rootElement, renderOpts: {'pretty': true,'indent': '    ','newline': '\r\n','cdata': true}
		}
	}
	else{
		var bldrOpts = {
			headless: true, renderOpts: {'pretty': true,'indent': '    ','newline': '\r\n','cdata': true}
		}
	}
    return new xml2js.Builder(bldrOpts).buildObject(json);
}

function encodeXML(text){
	return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
}

function decodeXML(text){
	return text.replace(/&apos;/g, "'").replace(/&quot;/g, '"').replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&amp;/g, '&');
}

function xmlStringToJSON(xml,callBack){
	xml2js.parseString(xml, {}, callBack);
}

function jsonArrayToXMLBuffer(jsonArray,elementName){
	/* holds the buffers */
	var buffers = [];
	/* conver each element to an xml buffer */
	for(var i in jsonArray){
		/* convert it to xml */
		var xmlString = jsonToXMLString(jsonArray[i],elementName);
		/* convert it to a buffer */
		var b = Buffer.from(xmlString+'\n', 'utf8');
		/* add to buffers array */
		buffers.push(b);
	}
	/* concat to one giant buffer */
	return Buffer.concat(buffers);
}

function generateXMLBuffer(data,elementName){
    /* create the buffer elements */
    var start = Buffer.from('<ROOT>\n', 'utf8');
    var xmlData = jsonArrayToXMLBuffer(data,elementName);
    var end = Buffer.from('</ROOT>\n', 'utf8');
    /* create the output buffer */
    var b = Buffer.concat([start,xmlData,end]);
    /* return the buffer */
    return b;
}

/********************************************************/
/********	ARCHER CALLBACK INTERFACE
/********************************************************/
/* callback function for top level datafeed function */
var dfCallback = function(err,data){
	if(err){
		LogError("Datafeed Failure due to error.");
		sendDataToArcher(null);
	}
	else{
		LogInfo("Exporting Data to Archer.");
		sendDataToArcher(data);
	}
};

function getArcherParams(){
	var params = null;
	/* which params should we use? */
	if(testingMode){
		params=testingMode_Params;
	}
	else{
		params=context.CustomParameters;
	}
	/* now add the default parmas */
	for(var k in defaultParams){
		if(!(k in params)){
			params[k]=defaultParams[k];
		}
	}
	/* return them */
	return params;
}

function getArcherTokens(){
	if(testingMode){
		return testingMode_Tokens;
	}
	return context.Tokens;
}

function sendDataToArcher(data){
	if(testingMode){
		if (data){
            var fileName = params['dataSource'] + ".xml";

            LogInfo("TESTING MODE, WRITING OUTPUT TO FILE: " + fileName);

			testingMode_FS.writeFile(fileName,data,function(err){
				if(err) {
					LogError("ERROR SAVING FILE IN TEST MODE: " + err);
				}
			});
		}
		if(errorArray.length>0){
			for(var i in errorArray){
				LogError(errorArray[i]);
			}
		}
	}
	else{
		/* check for any errors */
		if (errorArray.length>0){
			callback(errorArray,{output: data, previousRunContext: JSON.stringify(previousRunContext)});
		}
		else{
			callback(null,{output: data, previousRunContext: JSON.stringify(previousRunContext)});
		}
	}
}

/********************************************************/
/********	ERROR HANDLING AND LOGGING
/********************************************************/
function captureError(text){
	if(text!=null){
		/* create a new error to get the stack */
		var e = new Error();
		/* create error string for array */
		var errString = text + "\n" + e.stack;
		/* add to error array */
        errorArray.push(errString);
        /* log it */
        LogError(text);
	}
}

function getDateTime() {
    var dt = new Date();
    return pad(dt.getFullYear(),4)+"-"+pad(dt.getMonth()+1,2)+"-"+pad(dt.getDate(),2)+" "+pad(dt.getHours(),2)+":"+pad(dt.getMinutes(),2)+":"+pad(dt.getSeconds(),2);
}

function LogInfo(text){
    console.log(getDateTime() + " :: INFO  :: " + text);
}

function LogError(text){
	console.log(getDateTime() + " :: ERROR :: " + text);
}

function LogWarn(text){
    console.log(getDateTime() + " :: WARN  :: " + text);
}

/********************************************************/
/********	NODE.JS ARCHER API LIBRARY
/********************************************************/
class ArcherAPI{
	constructor(URL,Instance){
		this.URL=URL;
		this.Instance=Instance;
		this.SESSION_TOKEN = "";
 	}

	webCall(url,method,headers,postBody,callBack){
        /* build options */
        var options = {
            method: method,
            uri: url,
            headers: headers,
            body: postBody,
            rejectUnauthorized: verifyCerts
        }
        /* add in proxy */
        if(useProxy){
            options['proxy']=params['proxy'];
        }
        /* make request */
		request(options,
			function handleResponse(err, response, body)
			{
                /* check for errors */
				if(err) {
                    captureError('ERROR MAKING ARCHER HTTP CALL: ' + err);
                    callBack(true,body);
				}
				else if (response.statusCode==401){
                    captureError('ARCHER HTTP ERROR 401 NOT AUTHORIZED');
                    callBack(true,body);
				}
				else if (response.statusCode!=200){
                    captureError('ARCHER HTTP ERROR: ' + response.statusCode);
                    callBack(true,body);
                }
                else{
                    callBack(false,body);
                }
			}
		);
	}

	restHeaders(getOverride){
		/* build general headers */
		var restHeaders = {
			'Content-Type':'application/json',
			'Authorization':'Archer session-id="'+this.SESSION_TOKEN+'"',
			'User-Agent':'Archer API NODE Client'
		}
		/* get override? */
		if(getOverride) { restHeaders['X-Http-Method-Override']='GET'; }
		return restHeaders;
	}

	soapHeaders(soapAction){
		var restHeaders = {
			'Content-Type':'application/soap+xml; charset=UTF-8; action="http://archer-tech.com/webservices/' + soapAction + '"',
			'User-Agent':'Archer API NODE Client'
		}
		return restHeaders
	}

	soapCall(path,soapAction,soapBody,callBack){
		var SoapRequest =  '<?xml version="1.0" encoding="UTF-8"?>';
		SoapRequest += '<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope">';
		SoapRequest += '<soapenv:Body>';
		SoapRequest += '<' + soapAction + ' xmlns="http://archer-tech.com/webservices/">' + soapBody + '</' + soapAction + '>';
		SoapRequest += '</soapenv:Body></soapenv:Envelope>';
		/* get the current class */
		var cc = this;
		/* make web call */
		this.webCall(this.URL+"/"+path,'POST',this.soapHeaders(soapAction),SoapRequest,function handleSoapResponse(err,data)
		{
            /* check for error */
            if(err){
                callBack(err,null);
            }
            /* check for soap faults */
            else{
                /* holds soap faults */
                var soapFaults = "";
                /* rip out the soap part of the xml */
                var xmlData = data.replace(/<soap:/gi,'<').replace(/<\/soap:/gi,"<\/");
                /* parse the soap resonse */
                var soapResponse = new xmldom.DOMParser().parseFromString(xmlData);
                /* look for faults */
                var faults = xpath.select('//Fault',soapResponse);
                /* did we have faults */
                if (faults!=null && faults.length>0){
                    /* check each one */
                    for(var i=0;i<faults.length;i++){
                        /* get info about this fault */
                        soapFaults += "\n   " + xpath.select('string(//Reason/Text)',faults[i]);
                    }
                }

                /* check for faults */
                if(soapFaults!=""){
                    /* capture the error */
                    captureError('ARCHER SOAP FAULTS: ' + soapFaults);
                    callBack(true,null);
                }
                /* otherwise return data */
                else{
                    /* get the response component */
                    var splitString1 = '<' + soapAction + 'Result>';
                    var splitString2 = '</' + soapAction + 'Result>';
                    /* get the first part */
                    var r1 = xmlData.split(splitString1);
                    /* make sure we have data */
                    if(r1.length>1){
                        /* get the second part */
                        var r2 = r1[1].split(splitString2)
                        /* now unescape the result */
                        var responseXML = decodeXML(r2[0]);
                        /* return result with call back */
                        callBack(false,responseXML);
                    }
                    /* else no data */
                    else{
                        callBack(false,null);
                    }
                }
            }
		});
	}

	restCall(path,method,postBody,getOverride,callBack){
		this.webCall(this.URL+"/"+path,method,this.restHeaders(getOverride),JSON.stringify(postBody),function handleRestResponse(err,data)
		{
			/* check for err at http level */
			if(err){
				callBack(err,null);
			}
			else {
				var jObj = JSON.parse(data);
				/* check for errs in the rest level */
				if(jObj['IsSuccessful']){
					/* call the callback with no err */
					callBack(false,jObj['RequestedObject']);
				}
				/* capture rest errs */
				else{
					var message = jObj['ValidationMessages'];
					var messages =  "";
					/* check each message */
					for(var i=0;i<message.length;i++){
						messages += "\n   Reason: " + message[i]['Reason'] + ", MessageKey: " + message[i]['MessageKey'] + ", Description: " + message[i]['Description'] + ", ResourcedMessage: " + message[i]['ResourcedMessage'];
                    }
                    /* capture errors */
                    captureError('ARCHER REST FAULTS: ' + messages);
                    callBack(true,null);
				}
			}
		});
	}

	authenticate(user,pass,callBack)
	{
		/* build the json post body object */
		var postBody = {};
		postBody.InstanceName = this.Instance;
		postBody.Username = user;
		postBody.Password = pass;
		/* get the current class */
		var cc = this;
		/* make the web call */
		this.restCall("/api/core/security/login",'POST',postBody,false,function handleAuthResponse(err,data){
			if(err){
				callBack(err,null);
			}
			else{
				/* get the session token */
				cc.SESSION_TOKEN=data['SessionToken'];
				/* return call back */
				callBack(false,cc.SESSION_TOKEN);
			}
		});
	}

    paginateReport(reportId,reportFunction,maxRecords,metaDataLocator,recordParser,callBack){
        var cc = this;
        var currentPage = 0;
        var Metadata = null;
        var Records = {};
        var RecordCount = 0;

        /* function that pulls a single page of report data */
        var reportRetrieval = function(reportId,type,pageNumber,callBack){
            var SoapBody =  '<sessionToken>' + cc.SESSION_TOKEN + '</sessionToken>';
            SoapBody += '<reportIdOrGuid>' + reportId + '</reportIdOrGuid>';
            SoapBody += '<pageNumber>' + pageNumber + '</pageNumber>';
            /* make the soap call */
            cc.soapCall('/ws/search.asmx',type,SoapBody,callBack);
        }

        /* the next page */
        var getNextPage = function(){
            /* increase page number */
            currentPage++;
            /* make the call */
            reportRetrieval(reportId,reportFunction,currentPage,handleSearchCallback);
        }

        /* return records */
        var returnRecords = function(){
            /* make return structure */
            var output = {}
            output['ReportId'] = reportId;
            output['Records'] = Records;
            output['Metadata'] = {};
            /* do we have metadata? */
            if(Metadata!==null && Metadata.length>0 && 'FieldDefinitions' in Metadata[0] && Metadata[0]['FieldDefinitions'].length>0 && 'FieldDefinition' in Metadata[0]['FieldDefinitions'][0]){
                /* first parse metadata */
                var parsedMeta = parseMetadata(Metadata[0]['FieldDefinitions'][0]['FieldDefinition']);
                /* add to output */
                output['Metadata'] = parsedMeta;
            }
            /* return data */
            callBack(false,output);
        }

        var parseMetadata = function(m){
            var parsedMeta = {};
            parsedMeta['FieldDefinitions'] = {};
            /* parse each one */
            for(var j in m){
                var oldItem = m[j]['$'];
                var newItem = {};
                /* move each item over */
                for(var k in oldItem){
                    newItem[k] = oldItem[k];
                }
                /* now add to parse meta */
                parsedMeta['FieldDefinitions'][oldItem['guid']] = newItem;
            }
            return parsedMeta;
        }

        /* handle the callback */
        var handleSearchCallback = function(err,data){
            /* check for err */
            if(err){
                callBack(err,reportId);
            }
            else if(data===null){
                /* there is no data */
                returnRecords();
            }
            else{
                /* first convert to json */
                xmlStringToJSON(data,function(err,js){
                    if(err){
                        captureError('Failed to convert XML reponse to JSON: ' + err);
                        callBack(err,reportId);
                    }
                    else{
                        /* run the custom handlers */
                        var m = metaDataLocator(js);
                        var recs = recordParser(js);

                        /* did we get metadata? */
                        if(Metadata==null && m!==null){
                            Metadata=m;
                        }
                        /* did we get page data? */
                        if(recs!==null){
                            /* add each one to records */
                            for(var i in recs){
                                Records[RecordCount]=recs[i];
                                /* increase count */
                                RecordCount++;
                                /* have we hit max? */
                                if(maxRecords!==null && maxRecords>0 && maxRecords<=RecordCount){
                                    returnRecords();
                                }
                            }
                            /* get the next page */
                            getNextPage();
                        }
                        /* otherwise we have no more pages */
                        else{
                            returnRecords();
                        }
                    }
                });
            }
        }
        /* kickoff the chain */
        getNextPage();
    }

    getAllStatisticsReportRecords(reportId,maxRecords,callBack){
        /* function that locates metadata within the response */
        var metaDataLocator = function(js){
            if('Groups' in js && 'Metadata' in js['Groups']){
                return js['Groups']['Metadata'];
            }
            return null;
        }

        /* function that handles results from search */
        var recordParser = function(js){
            var parsedRecords = {};

            /* look to see if we have records */
            if('Groups' in js && 'Group' in js['Groups'] && js['Groups']['Group'].length>0){
                var recs = js['Groups']['Group'];

                /* parse each one */
                for(var i in recs){
                    var newRecord = {}
                    /* parse the base criteria */
                    for(var j in recs[i]['$']){
                        newRecord[j] = recs[i]['$'][j];
                    }

                    /* get aggregate/ group criteria */
                    if('Group' in recs[i]){
                        newRecord['Groups'] = [];

                        /* iterate on groups */
                        for(var j in recs[i]['Group']){
                            /* create group object */
                            var newGroup = {};

                            /* parse the base criteria */
                            for(var k in recs[i]['Group'][j]['$']){
                                newGroup[k] = recs[i]['Group'][j]['$'][k];
                            }

                            /* get the aggregates */
                            if('Aggregates' in recs[i]['Group'][j] && recs[i]['Group'][j]['Aggregates'].length>0 &&
                               'Aggregate' in recs[i]['Group'][j]['Aggregates'][0] && recs[i]['Group'][j]['Aggregates'][0]['Aggregate'].length>0){
                                /* get the aggregate */
                                var ag = recs[i]['Group'][j]['Aggregates'][0]['Aggregate'][0];
                                /* get the count */
                                newGroup['Count'] = ag['$']['Count'];
                            }

                            /* add group to output */
                            newRecord['Groups'].push(newGroup);
                        }
                    }

                    /* add to parsed records */
                    parsedRecords[i]=newRecord;
                }
            }

            /* check if we have data */
            if(Object.keys(parsedRecords).length>0){
                return parsedRecords;
            }
            return null;
        }

        /* get the report data */
        this.paginateReport(reportId,'ExecuteStatisticSearchByReport',maxRecords,metaDataLocator,recordParser,callBack);
    }

    getAllReportRecords(reportId,maxRecords,callBack){
        /* function that locates metadata within the response */
        var metaDataLocator = function(js){
            if('Records' in js && 'Metadata' in js['Records']){
                return js['Records']['Metadata'];
            }
            return null;
        }

        /* function that handles results from search */
        var recordParser = function(js){
            var parsedRecords = {};

            /* look to see if we have records */
            if('Records' in js && 'Record' in js['Records'] && js['Records']['Record'].length>0){
                var recs = js['Records']['Record'];
                /* parse each record */
                for(var i in recs){
                    var newRecord = {}
                    /* parse the base criteria */
                    for(var j in recs[i]['$']){
                        newRecord[j] = recs[i]['$'][j];
                    }
                    /* now do the fields */
                    if('Field' in recs[i]){
                        newRecord['Fields'] = {};
                        /* add each field */
                        for(var k in recs[i]['Field']){
                            var newField = {};
                            /* add value */
                            newField['value'] = '';
                            if('_' in recs[i]['Field'][k]){
                                newField['value']=recs[i]['Field'][k]['_'];
                            }
                            /* add the base params */
                            for(var p in recs[i]['Field'][k]['$']){
                                newField[p]=recs[i]['Field'][k]['$'][p];
                            }
                            /* now do list values */
                            if('ListValues' in recs[i]['Field'][k] && recs[i]['Field'][k]['ListValues'].length>0 && 'ListValue' in recs[i]['Field'][k]['ListValues'][0]){
                                newField['ListValues']=[];
                                /* parse each one */
                                for(var lv in recs[i]['Field'][k]['ListValues'][0]['ListValue']){
                                    var newListValue = {};
                                    /* add in value */
                                    newListValue['value']='';
                                    if('_' in recs[i]['Field'][k]['ListValues'][0]['ListValue'][lv]) {
                                        newListValue['value']=recs[i]['Field'][k]['ListValues'][0]['ListValue'][lv]['_'];
                                    }
                                    /* now add in the base values */
                                    if('$' in recs[i]['Field'][k]['ListValues'][0]['ListValue'][lv]){
                                        for(var bv in recs[i]['Field'][k]['ListValues'][0]['ListValue'][lv]['$']){
                                            newListValue[bv]=recs[i]['Field'][k]['ListValues'][0]['ListValue'][lv]['$'][bv];
                                        }
                                    }
                                    /* add it */
                                    newField['ListValues'].push(newListValue);
                                }
                            }
                            /* now add the remaining params */
                            for(var p in recs[i]['Field'][k]){
                                if(p!='_' && p!='$' && p!='ListValues'){
                                    newField[p]=recs[i]['Field'][k][p];
                                }
                            }
                            /* add the field */
                            newRecord['Fields'][newField['id']] = newField;
                        }
                    }
                    /* add to parsed records */
                    parsedRecords[newRecord['contentId']] = newRecord;
                }
            }

            /* check if we have data */
            if(Object.keys(parsedRecords).length>0){
                return parsedRecords;
            }
            return null;
        }
        /* get the report data */
        this.paginateReport(reportId,'SearchRecordsByReport',maxRecords,metaDataLocator,recordParser,callBack);
    }
}


/********************************************************/
/******** DATAFEED HELPER FUNCTIONS
/********************************************************/
function collectReports(a,reports,callBack){
    var outputData = {};
    var error = false;
    var reportList = [];

    /* build the report list */
    for(var type in reports){
        for(var rep in reports[type]){
            reportList.push(reports[type][rep]);
        }
    }

    /* check for last call */
    var lastCallCheck = function(){
        /* determine if this call is the final one */
        var lastCall = true;
        /* check each report */
        for(var i in reportList){
            if(!(reportList[i] in outputData)){
                lastCall=false;
            }
        }
        /* was this the last one? */
        if(lastCall){
            callBack(error,outputData);
        }
    }

    /* callback method for report retrieval */
    var collectReportsCB = function(err,data){
        if(err){
            captureError('Report Failed: ' + data);
            outputData[data]={};
            error = true;
        }
        else{
            LogInfo("Report Complete: " + data['ReportId'] + ", Records Received: " + Object.keys(data['Records']).length);
            /* add to output */
            outputData[data['ReportId']]=data;
        }
        lastCallCheck();
    }

    /* start each report */
    for(var i in reportList){
        LogInfo("Getting Report: " + reportList[i]);
        a.getAllStatisticsReportRecords(reportList[i],0,collectReportsCB);
    }
}

function generateData(reportData,reports){
    /* holds the output records */
    var normalizedRecords = {};

    /* iterate on the report type */
    for(var type in reports){
        /* add this type */
        normalizedRecords[type] = {};

        /* iterate on report */
        for(var rp in reports[type]){
            /* iterate on records */
            for(var i in reportData[reports[type][rp]]['Records']){
                /* get this record */
                var rec = reportData[reports[type][rp]]['Records'][i];
                /* see if this record needs to be added to output */
                if(!(rec['Value'] in normalizedRecords[type])){
                    /* create it */
                    normalizedRecords[type][rec['Value']] = {};
                    normalizedRecords[type][rec['Value']]['Groups'] = [];
                }
                /* now add all of the groups */
                for(var j in rec['Groups']){
                    /* add the type to the groups */
                    rec['Groups'][j]['ReportType']=rp;
                    /* now add to normalized */
                    normalizedRecords[type][rec['Value']]['Groups'].push(rec['Groups'][j]);
                }
            }
        }
    }

    /* hold the archer records */
    var archerRecords = [];

    /* get current date */
    var today = new Date();

    /* now build out at the archer record level */
    for(var type in normalizedRecords){
        /* iterate on each record */
        for(var rec in normalizedRecords[type]){
            var archerRecord = {};
            /* add fields to record */
            archerRecord['_unique_key'] = type+'_'+rec+'_'+today.toISOString().substring(0,10);
            archerRecord['aggregationType'] = type;
            archerRecord['valueName'] = rec;
            archerRecord['date'] = getArcherDate(today.getTime()/1000).substring(0,10);
            /* add in the group based fields */
            for(var g in normalizedRecords[type][rec]['Groups']){
                 /* build the key name */
                 let kn = normalizedRecords[type][rec]['Groups'][g]['ReportType']+'_'+normalizedRecords[type][rec]['Groups'][g]['Value'];
                 /* clean up the kn */
                 // handles triple xml encoded values returned from Archer
                 kn = decodeXML(decodeXML(decodeXML(kn)));
                 kn = kn.replace(/[\u0020-\u002C]|[\u002F]|[\u003A-\u0040]|[\u005B-\u005E]|[\u0060]|[\u007B-\u007E]|[\u00A0-\u00B6]|[\u00B8-\u00BF]|[\u00D7]|[\u00F7]/g,'_');

                 if (archerRecord[kn])
                 {
                   let knTemp = kn;
                   // Chances are best for less than 3.
                   // 99 is a good enough upper limit.
                   for (let i = 0; i < 99; i++) {
                     knTemp = kn + '_ERROR' + i;
                     if (!archerRecord[knTemp]) {
                       break;
                     }
                   }
                   kn = knTemp;
                 }

                 /* add to record */
                 archerRecord[kn]=normalizedRecords[type][rec]['Groups'][g]['Count'];
            }
            /* add record to output records */
            archerRecords.push(archerRecord);
        }
    }

    LogInfo("Generated " + archerRecords.length + " Archer Records");

    /* return the record set */
    return archerRecords;
}



/********************************************************/
/******** DATAFEED BEGINS HERE
/********************************************************/
init();

/********** BUILD OUT THE REPORT COLLECTION OBJECT **********/
var reports = {
    "Application":{
        'Overall_Status':params['Report_App_Vuln_Overall_Status'],
        'Severity':params['Report_App_Vuln_Severity'],
		'Device_Count':params['Report_App_Device_Count'],
		'Device_Scan_Last_30_Count':params['Report_App_Device_Scan_Count']
    },
    "Business_Process":{
        'Overall_Status':params['Report_Bus_Process_Vuln_Overall_Status'],
        'Severity':params['Report_Bus_Process_Vuln_Severity'],
		'Device_Count':params['Report_Bus_Process_Device_Count'],
		'Device_Scan_Last_30_Count':params['Report_Bus_Process_Device_Scan_Count']
    },
    "Business_Unit":{
        'Overall_Status':params['Report_Bus_Unit_Vuln_Overall_Status'],
        'Severity':params['Report_Bus_Unit_Vuln_Severity'],
		'Device_Count':params['Report_Bus_Unit_Device_Count'],
		'Device_Scan_Last_30_Count':params['Report_Bus_Unit_Device_Scan_Count']
    },
	"Product":{
        'Overall_Status':params['Report_Product_Vuln_Overall_Status'],
        'Severity':params['Report_Product_Vuln_Severity'],
		'Device_Count':params['Report_Product_Device_Count'],
		'Device_Scan_Last_30_Count':params['Report_Product_Device_Scan_Count']
    },
	"Vendor":{
        'Overall_Status':params['Report_Vendor_Vuln_Overall_Status'],
        'Severity':params['Report_Vendor_Vuln_Severity'],
		'Device_Count':params['Report_Vendor_Device_Count'],
		'Device_Scan_Last_30_Count':params['Report_Vendor_Device_Scan_Count']
    },
	"All_Dimensions":{
        'Overall_Status':params['Report_All_Dimensions_Vuln_Overall_Status'],
		'Severity':params['Report_All_Dimensions_Vuln_Severity'],
		'Device_Count':params['Report_All_Dimensions_Device_Count'],
		'Device_Scan_Last_30_Count':params['Report_All_Dimensions_Device_Scan_Count']
    }
};

/* run the feed */
LogInfo("Datafeed Starting");

/* create security center instance */
var aapi = new ArcherAPI(params['url'],params['instance']);

LogInfo('Authenticating to Archer Instance');

/* authenticate to archer api */
aapi.authenticate(params['username'],params['password'],function authHandler(err,token){
	if(err){
		captureError('FAILED TO AUTHENTICATE TO ARCHER');
		dfCallback(err,null);
	}
    else{
        LogInfo('Collecting Data from Reports');
        /* collect all of the reports */
        collectReports(aapi,reports,function(err,reportData){
            if(err){
                captureError('Failure while collecting report data');
                dfCallback(err,null);
            }
            else{
                LogInfo('Generating Output Data from Report Data');
                /* generate the output data */
                var d = generateData(reportData,reports);
                /* convert to xml buffer */
                LogInfo('Converting Data to XML Buffer');
                /* return to archer */
                dfCallback(false,generateXMLBuffer(d,'RECORD'));
            }
        });
    }
});

// SIG // Begin signature block
// SIG // MIIXtAYJKoZIhvcNAQcCoIIXpTCCF6ECAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // WAIH9tPOvN/y59IgmUbUsY2+L+gev2c896gmcq1+/Hag
// SIG // ghK6MIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8
// SIG // OzANBgkqhkiG9w0BAQUFADCBizELMAkGA1UEBhMCWkEx
// SIG // FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxML
// SIG // RHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG
// SIG // A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNV
// SIG // BAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNMTIx
// SIG // MjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYD
// SIG // VQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9y
// SIG // YXRpb24xMDAuBgNVBAMTJ1N5bWFudGVjIFRpbWUgU3Rh
// SIG // bXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrY
// SIG // JXmRIlcqb9y4JsRDc2vCvy5QWvsUwnaOQwElQ7Sh4kX0
// SIG // 6Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
// SIG // i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+J
// SIG // zueZ5/6M4lc/PcaS3Er4ezPkeQr78HWIQZz/xQNRmarX
// SIG // bJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3+3R8
// SIG // J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrl
// SIG // Dqcsn6plINPYlujIfKVOSET/GeJEB5IL12iEgF1qeGRF
// SIG // zWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAdBgNVHQ4E
// SIG // FgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUH
// SIG // AQEEJjAkMCIGCCsGAQUFBzABhhZodHRwOi8vb2NzcC50
// SIG // aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwPwYD
// SIG // VR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUu
// SIG // Y29tL1RoYXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCAQYw
// SIG // KAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFt
// SIG // cC0yMDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nv
// SIG // f1kwqu9otfrjCR27T4IGXTdfplKfFo3qHJIJRG71betY
// SIG // fDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
// SIG // 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq
// SIG // 3dlXPx13SYcqFgZepjhqIhKjURmDfrYwggSjMIIDi6AD
// SIG // AgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3DQEB
// SIG // BQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1h
// SIG // bnRlYyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50
// SIG // ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcy
// SIG // MB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVow
// SIG // YjELMAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVj
// SIG // IENvcnBvcmF0aW9uMTQwMgYDVQQDEytTeW1hbnRlYyBU
// SIG // aW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // omMLOUS4uyOnREm7Dv+h8GEKU5OwmNutLA9KxW7/hjxT
// SIG // VQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf
// SIG // 2Gi0jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh
// SIG // 3WPVF4kyW7BemVqonShQDhfultthO0VRHc8SVguSR/yr
// SIG // rvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
// SIG // d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsy
// SIG // i1aLM73ZY8hJnTrFxeozC9Lxoxv0i77Zs1eLO94Ep3oi
// SIG // siSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQABo4IB
// SIG // VzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAK
// SIG // BggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwcwYIKwYB
// SIG // BQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRwOi8vdHMt
// SIG // b2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKG
// SIG // K2h0dHA6Ly90cy1haWEud3Muc3ltYW50ZWMuY29tL3Rz
// SIG // cy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAxoC+gLYYraHR0
// SIG // cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNh
// SIG // LWcyLmNybDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQ
// SIG // VGltZVN0YW1wLTIwNDgtMjAdBgNVHQ4EFgQURsZpow5K
// SIG // FB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzM
// SIG // zHSa1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEB
// SIG // AHg7tJEqAEzwj2IwN3ijhCcHbxiy3iXcoNSUA6qGTiWf
// SIG // mkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
// SIG // BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1
// SIG // zSgEIKOq8UvEiCmRDoDREfzdXHZuT14ORUZBbg2w6jia
// SIG // sTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IWyhOB
// SIG // bQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4ax
// SIG // gohd8D20UaF5Mysue7ncIAkTcetqGVvP6KUwVyyJST+5
// SIG // z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUwggTSMIID
// SIG // uqADAgECAhBowaMHr0w++ZzIKhJ9jl4fMA0GCSqGSIb3
// SIG // DQEBCwUAMIGEMQswCQYDVQQGEwJVUzEdMBsGA1UEChMU
// SIG // U3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNVBAsTFlN5
// SIG // bWFudGVjIFRydXN0IE5ldHdvcmsxNTAzBgNVBAMTLFN5
// SIG // bWFudGVjIENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmlu
// SIG // ZyBDQSAtIEcyMB4XDTE5MDIwMTAwMDAwMFoXDTIxMDEz
// SIG // MTIzNTk1OVowgYIxCzAJBgNVBAYTAnVzMRYwFAYDVQQI
// SIG // DA1NYXNzYWNodXNldHRzMRAwDgYDVQQHDAdCZWRmb3Jk
// SIG // MRkwFwYDVQQKDBBSU0EgU2VjdXJpdHkgTExDMRMwEQYD
// SIG // VQQLDApSU0EgQXJjaGVyMRkwFwYDVQQDDBBSU0EgU2Vj
// SIG // dXJpdHkgTExDMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
// SIG // MIIBCgKCAQEArF+zGB8UNMiZXf9yz5/fzEIlFf/NyotC
// SIG // RhE9HBvO5bdbuVRlhJfrdt2PXlI0n0bXb5CULFQexF++
// SIG // 6S/HEz4QehP/WUdYhotlxVX8UZv6vit2OuYGTCv4Grw9
// SIG // 8WSNxeI5MB0lz5kzl2IWl3DgZQTSd/FYUehNRGiP0/cC
// SIG // ZBedgSQnV5MAERyQWhshxnEwz/NFaJOxDINYQBzwvRRD
// SIG // gBAbkG+9ixCzCi85Yz8yGRo68uL0zjkArxmPfOCFJ2Pr
// SIG // zbv6QQbAyLX36WlMq31m43lTT/1q/fgw6l0Ku+28EZiu
// SIG // +gdXAE/E/KMD1sJwiIb9XPABt+Xg1JIEdJLSYaywEVIO
// SIG // sQIDAQABo4IBPjCCATowCQYDVR0TBAIwADAOBgNVHQ8B
// SIG // Af8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwYQYD
// SIG // VR0gBFowWDBWBgZngQwBBAEwTDAjBggrBgEFBQcCARYX
// SIG // aHR0cHM6Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUH
// SIG // AgIwGQwXaHR0cHM6Ly9kLnN5bWNiLmNvbS9ycGEwHwYD
// SIG // VR0jBBgwFoAU1MAGIknrOUvdk+JcobhHdglyA1gwKwYD
// SIG // VR0fBCQwIjAgoB6gHIYaaHR0cDovL3JiLnN5bWNiLmNv
// SIG // bS9yYi5jcmwwVwYIKwYBBQUHAQEESzBJMB8GCCsGAQUF
// SIG // BzABhhNodHRwOi8vcmIuc3ltY2QuY29tMCYGCCsGAQUF
// SIG // BzAChhpodHRwOi8vcmIuc3ltY2IuY29tL3JiLmNydDAN
// SIG // BgkqhkiG9w0BAQsFAAOCAQEAOsgHWRMiKP7JLfJj1akO
// SIG // lQpVEY9VxXFbVBlGsUdSUM0UI4/qb/3zKGDRbHV/PBXR
// SIG // O1LK+QlfOohZe0l7HKVF/z9W6UHQM1HhihDwBb8VEdVN
// SIG // t5Xv44dkzuoArcCe2+6fuFq50iQTQYYXMx2kHiJwdkFl
// SIG // XAFs8OrHLw7wXradkWkMFzLwhvFtmzbfr1IxI10/K55N
// SIG // 3jjhb/8/49rQ7e4xlUUgZGn+V1Qe3vFoA5jU1klVcJNl
// SIG // hAGgl8fONTLXzkKQ1rOtkyyZZmGjiusKBGLlbHZwkPCi
// SIG // 19D6sPcHj/bOJ4AcxeSA5XrzXcVzzY4VreIWhXTTfw7/
// SIG // Bu+/TyUgA3T23zCCBUcwggQvoAMCAQICEHwbNTVK59t0
// SIG // 50FfEWnKa6gwDQYJKoZIhvcNAQELBQAwgb0xCzAJBgNV
// SIG // BAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEf
// SIG // MB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazE6
// SIG // MDgGA1UECxMxKGMpIDIwMDggVmVyaVNpZ24sIEluYy4g
// SIG // LSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTE4MDYGA1UE
// SIG // AxMvVmVyaVNpZ24gVW5pdmVyc2FsIFJvb3QgQ2VydGlm
// SIG // aWNhdGlvbiBBdXRob3JpdHkwHhcNMTQwNzIyMDAwMDAw
// SIG // WhcNMjQwNzIxMjM1OTU5WjCBhDELMAkGA1UEBhMCVVMx
// SIG // HTAbBgNVBAoTFFN5bWFudGVjIENvcnBvcmF0aW9uMR8w
// SIG // HQYDVQQLExZTeW1hbnRlYyBUcnVzdCBOZXR3b3JrMTUw
// SIG // MwYDVQQDEyxTeW1hbnRlYyBDbGFzcyAzIFNIQTI1NiBD
// SIG // b2RlIFNpZ25pbmcgQ0EgLSBHMjCCASIwDQYJKoZIhvcN
// SIG // AQEBBQADggEPADCCAQoCggEBANeVQ9Tc32euOftSpLYm
// SIG // MQRw6beOWyq6N2k1lY+7wDDnhthzu9/r0XY/ilaO6y1L
// SIG // 8FcYTrGNpTPTC3Uj1Wp5J92j0/cOh2W13q0c8fU1tCJR
// SIG // ryKhwV1LkH/AWU6rnXmpAtceSbE7TYf+wnirv+9Srpyv
// SIG // CNk55ZpRPmlfMBBOcWNsWOHwIDMbD3S+W8sS4duMxICU
// SIG // crv2RZqewSUL+6McntimCXBx7MBHTI99w94Zzj7uBHKO
// SIG // F9P/8LIFMhlM07Acn/6leCBCcEGwJoxvAMg6ABFBekGw
// SIG // p4qRBKCZePR3tPNgKuZsUAS3FGD/DVH0qIuE/iHaXF59
// SIG // 9Sl5T7BEdG9tcv8CAwEAAaOCAXgwggF0MC4GCCsGAQUF
// SIG // BwEBBCIwIDAeBggrBgEFBQcwAYYSaHR0cDovL3Muc3lt
// SIG // Y2QuY29tMBIGA1UdEwEB/wQIMAYBAf8CAQAwZgYDVR0g
// SIG // BF8wXTBbBgtghkgBhvhFAQcXAzBMMCMGCCsGAQUFBwIB
// SIG // FhdodHRwczovL2Quc3ltY2IuY29tL2NwczAlBggrBgEF
// SIG // BQcCAjAZGhdodHRwczovL2Quc3ltY2IuY29tL3JwYTA2
// SIG // BgNVHR8ELzAtMCugKaAnhiVodHRwOi8vcy5zeW1jYi5j
// SIG // b20vdW5pdmVyc2FsLXJvb3QuY3JsMBMGA1UdJQQMMAoG
// SIG // CCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIBBjApBgNVHREE
// SIG // IjAgpB4wHDEaMBgGA1UEAxMRU3ltYW50ZWNQS0ktMS03
// SIG // MjQwHQYDVR0OBBYEFNTABiJJ6zlL3ZPiXKG4R3YJcgNY
// SIG // MB8GA1UdIwQYMBaAFLZ3+mlIR59TEtXC6gcydgfRlwcZ
// SIG // MA0GCSqGSIb3DQEBCwUAA4IBAQB/68qn6ot2Qus+jiBU
// SIG // MOO3udz6SD4Wxw9FlRDNJ4ajZvMC7XH4qsJVl5Fwg/lS
// SIG // flJpPMnx4JRGgBi7odSkVqbzHQCR1YbzSIfgy8Q0aCBe
// SIG // tMv5Be2cr3BTJ7noPn5RoGlxi9xR7YA6JTKfRK9uQyjT
// SIG // IXW7l9iLi4z+qQRGBIX3FZxLEY3ELBf+1W5/muJWkvGW
// SIG // s60t+fTf2omZzrI4RMD3R3vKJbn6Kmgzm1By3qif1M0s
// SIG // CzS9izB4QOCNjicbkG8avggVgV3rL+JR51EeyXgp5x5l
// SIG // vzjvAUoBCSQOFsQUecFBNzTQPZFSlJ3haO8I8OJpnGdu
// SIG // kAsak3HUJgLDwFojMYIEUjCCBE4CAQEwgZkwgYQxCzAJ
// SIG // BgNVBAYTAlVTMR0wGwYDVQQKExRTeW1hbnRlYyBDb3Jw
// SIG // b3JhdGlvbjEfMB0GA1UECxMWU3ltYW50ZWMgVHJ1c3Qg
// SIG // TmV0d29yazE1MDMGA1UEAxMsU3ltYW50ZWMgQ2xhc3Mg
// SIG // MyBTSEEyNTYgQ29kZSBTaWduaW5nIENBIC0gRzICEGjB
// SIG // owevTD75nMgqEn2OXh8wDQYJYIZIAWUDBAIBBQCgfDAQ
// SIG // BgorBgEEAYI3AgEMMQIwADAZBgkqhkiG9w0BCQMxDAYK
// SIG // KwYBBAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYB
// SIG // BAGCNwIBFTAvBgkqhkiG9w0BCQQxIgQg5micgrdf2vWs
// SIG // t5l7q0GpFXu3lzeoepSMamjqQBBUT1owDQYJKoZIhvcN
// SIG // AQEBBQAEggEAYviIesuq87i8Lyld7/lHPQ/iT3XzKnJw
// SIG // DBbqk7VZ1ppl77lzgcKVL+3xy9CEVzfkSZicMDR/NPl9
// SIG // wQtDlpvxzRYMaDovlWYv78RGd6h638wF0qaW5P/cj8PR
// SIG // EKz/Gg83CVMTxQfZQOu13WEpXAnFyieDPZUcxOLkrpol
// SIG // nq7lNB6O8SmizeqCC0tarVGNnajv4E2QJBwMouv7nvXz
// SIG // yij5faOJm5pu6InTJhL+zzNBXOlz89qbaaGdU4NGlSYK
// SIG // KHfkgC+jpA3tvbmAyqJwA+q/VHZwn0WpWaTmyV5MnX7R
// SIG // HnIInz5Jyvoait2hBc50IvoWsbK61DddT1IZZGATON1I
// SIG // JqGCAgswggIHBgkqhkiG9w0BCQYxggH4MIIB9AIBATBy
// SIG // MF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1hbnRl
// SIG // YyBDb3Jwb3JhdGlvbjEwMC4GA1UEAxMnU3ltYW50ZWMg
// SIG // VGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQSAtIEcyAhAO
// SIG // z/Q4yP6/NW4E2GqYGxpQMAkGBSsOAwIaBQCgXTAYBgkq
// SIG // hkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJ
// SIG // BTEPFw0xOTEwMjkxODEzMTNaMCMGCSqGSIb3DQEJBDEW
// SIG // BBTb+9BCfZcJS7Il77FLRsKOptXwrTANBgkqhkiG9w0B
// SIG // AQEFAASCAQCQrCDEev8iqldO3Sp+BZAsmSYgC+6OEAB+
// SIG // B5AOYr2GSw8itc58WghCd/NRayXh7rGD9cZ7ugPyX4eq
// SIG // jN4tQgudw+WnnE4s+r7/Q6jFevA5/unjue24cPCBWvm1
// SIG // 4XBoUdJWo3/nzmQ5aXQtmjC1n++ljomp7HZpqF7Y+mfb
// SIG // AZEI6+AKDtvDRQ2Zi+Jb2LQiuHODUzW9ix+Kxqj8/h6l
// SIG // Dxv3G1q/4wDGsoV93/NCt15VIFO/lYNWNhwhvbJyFDPa
// SIG // lycq6vHAyzxKU9t9y8Xj0+Xkpzt3SwUQydUiXYFQ5yaI
// SIG // oEPnhYe7zKEFYM5DgdbjpVZzYt1F7avvWm1l/1n2EjyJ
// SIG // End signature block
